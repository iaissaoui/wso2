<?xml version="1.0" encoding="UTF-8"?>
<api context="/api" name="api" xmlns="http://ws.apache.org/ns/synapse">
    <resource methods="GET" url-mapping="/hello">
        <inSequence>
            <log description="Start" level="custom" separator=" ### ">
                <property name="Started Service on GET" value="/hello"/>
            </log>
            <log description="Full" level="full" separator=" ### "/>
            <log description="End" level="custom" separator=" ### ">
                <property name="Ended Service" value="/hello"/>
            </log>
            <respond/>
        </inSequence>
        <outSequence/>
        <faultSequence/>
    </resource>
    <resource methods="POST" url-mapping="/hello">
        <inSequence>
            <log description="Start" level="custom" separator="@@@">
                <property name="Started Service on POST" value="/hello"/>
            </log>
            <log description="Full" level="full"/>
            <log description="in-logs" level="custom">
                <property expression="json-eval($)" name="in-sequence"/>
            </log>
            <loopback/>
        </inSequence>
        <outSequence>
            <property expression="json-eval($.name)" name="name" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('name')" name="prop 1"/>
            </log>
            <property expression="fn:concat('{&quot;message&quot; : &quot;Hello ' , get-property('name'), '!&quot;}' )" name="message" scope="default" type="STRING"/>
            <log level="custom">
                <property expression="get-property('message')" name="prop 2"/>
            </log>
            <enrich>
                <source clone="true" type="inline">
					{&#xd;
					"dummy": "dummy"&#xd;
					}
				</source>
                <target action="child" xpath="json-eval($)"/>
            </enrich>
            <enrich description="">
                <source clone="true" property="message" type="property"/>
                <target action="child" xpath="json-eval($)"/>
            </enrich>
            <!-- <log description="out-logs" level="custom"> -->
            <!-- <property expression="json-eval($)" name="out-sequence"/> -->
            <!-- </log> -->
            <respond/>
        </outSequence>
        <faultSequence/>
    </resource>
    <resource methods="POST" url-mapping="/helloxml">
        <inSequence>
            <log level="full">
                <property name="At" value="In-Sequence"/>
            </log>
            <loopback/>
        </inSequence>
        <outSequence>
            <datamapper config="gov:datamapper/json-to-xml.dmc" inputSchema="gov:datamapper/json-to-xml_inputSchema.json" inputType="JSON" outputSchema="gov:datamapper/json-to-xml_outputSchema.json" outputType="XML" xsltStyleSheet="gov:datamapper/json-to-xml_xsltStyleSheet.xml"/>
            <log level="full"/>
            <respond/>
        </outSequence>
        <faultSequence>
            <log level="full">
                <property name="At" value="Fault"/>
            </log>
        </faultSequence>
    </resource>
    <resource methods="POST" url-mapping="/stocks">
        <inSequence>
            <log>
                <property name="IN 1" value="TRUE"/>
            </log>
            <validate cache-schema="true" source="json-eval($)">
                <schema key="conf:myresources/json-validator-iqbal.json"/>
                <on-fail>
                    <payloadFactory media-type="json">
                        <format>
							{"Error":"JSON validation failed, check format"}
						</format>
                        <args/>
                    </payloadFactory>
                    <property name="HTTP_SC" scope="axis2" type="STRING" value="500"/>
                    <respond/>
                </on-fail>
            </validate>
            <log>
                <property name="IN 2" value="TRUE"/>
            </log>
            <filter regex="NSDQ" source="json-eval($.stockexchange)">
                <then>
                    <log>
                        <property name="Filter" value="OK"/>
                    </log>
                    <switch source="json-eval($.company)">
                        <case regex="Apple">
                            <log>
                                <property name="CASE APPLE" value="TRUE"/>
                            </log>
                            <enrich>
                                <source clone="true" type="inline">{ "company":"AAPL" , "stockexchange":"NASDAQ"}</source>
                                <target type="body"/>
                            </enrich>
                            <log level="full"/>
                        </case>
                        <case regex="Microsoft">
                            <log>
                                <property name="CASE MS" value="TRUE"/>
                            </log>
                            <enrich>
                                <source clone="true" type="inline">{ "company":"MSFT" , "stockexchange":"NASDAQ"}</source>
                                <target type="body"/>
                            </enrich>
                            <log level="full"/>
                        </case>
                        <default>
                            <log>
                                <property name="Switch FAIL" value="TRUE"/>
                            </log>
                            <makefault version="soap11">
                                <code value="soap11Env:VersionMismatch" xmlns:soap11Env="http://schemas.xmlsoap.org/soap/envelope/"/>
                                <reason value="Switch Default Case"/>
                                <detail>Only values allowed are "Apple" &amp; "Microsoft"</detail>
                            </makefault>
                            <respond/>
                        </default>
                    </switch>
                    <log>
                        <property name="OUT OF SWITCH" value="TRUE"/>
                    </log>
                    <payloadFactory media-type="xml">
                        <format>
                            <soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:web="http://www.gama-system.com/webservices">
                                <soap:Header/>
                                <soap:Body>
                                    <web:GetLatestStockValue>
                                        <web:strStockExchange>$1</web:strStockExchange>
                                        <web:strStock>$2</web:strStock>
                                    </web:GetLatestStockValue>
                                </soap:Body>
                            </soap:Envelope>
                        </format>
                        <args>
                            <arg evaluator="json" expression="$.stockexchange"/>
                            <arg evaluator="json" expression="$.company"/>
                        </args>
                    </payloadFactory>
                    <header name="Action" scope="default" value="http://www.gama-system.com/webservices/GetLatestStockValue"/>
                    <log level="full">
                        <property name="AFTER HEADER" value="TRUE"/>
                    </log>
                    <send>
                        <endpoint key="StocksQuotes"/>
                    </send>
                </then>
                <else>
                    <log>
                        <property name="Filter" value="NOK"/>
                    </log>
                    <makefault version="soap11">
                        <code value="soap11Env:VersionMismatch" xmlns:soap11Env="http://schemas.xmlsoap.org/soap/envelope/"/>
                        <reason value="Filter Fault"/>
                        <detail>Only Stock Exchange value allowed is NSDQ</detail>
                    </makefault>
                    <respond/>
                </else>
            </filter>
            <log>
                <property name="IN 3" value="TRUE"/>
            </log>
            <!--       



            <switch source="json-eval($)">
                <case regex="Apple"/>
                <case regex="Microsoft"/>
                <default/>
            </switch>
            <log>
                <property name="IN 4" value="TRUE"/>
            </log>
            <send>
                <endpoint key="StocksQuotes"/>
            </send>
       


-->
            <loopback/>
        </inSequence>
        <outSequence>
            <!--             <payloadFactory media-type="json"> -->
            <!--                 <format> {"stockvalue" : "$1" }</format> -->
            <!--                 <args> -->
            <!--                     <arg evaluator="xml" expression="//GetLatestStockValueResult"/> -->
            <!--                 </args> -->
            <!--             </payloadFactory> -->
            <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
            <log level="full">
                <property name="OUT SEQUENCE" value="TRUE"/>
            </log>
            <send/>
        </outSequence>
        <faultSequence>
            <log level="full">
                <property name="ERROR SEQUENCE" value="TRUE"/>
            </log>
            <respond/>
        </faultSequence>
    </resource>
    <resource methods="GET" url-mapping="/stocks">
        <inSequence>
            <log/>
            <clone id="IA101">
                <target>
                    <sequence>
                        <payloadFactory media-type="xml">
                            <format>
                                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.gama-system.com/webservices">
                                    <soapenv:Header/>
                                    <soapenv:Body>
                                        <web:GetLatestStockValue>
                                            <web:strStockExchange>NASDAQ</web:strStockExchange>
                                            <web:strStock>AAPL</web:strStock>
                                        </web:GetLatestStockValue>
                                    </soapenv:Body>
                                </soapenv:Envelope>
                            </format>
                            <args/>
                        </payloadFactory>
                        <log level="custom">
                            <property name="AAPL" value="AAPL"/>
                        </log>
                        <send>
                            <endpoint key="StocksQuotes"/>
                        </send>
                    </sequence>
                </target>
                <target>
                    <sequence>
                        <payloadFactory media-type="xml">
                            <format>
                                <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://www.gama-system.com/webservices">
                                    <soapenv:Header/>
                                    <soapenv:Body>
                                        <web:GetLatestStockValue>
                                            <web:strStockExchange>NASDAQ</web:strStockExchange>
                                            <web:strStock>MSFT</web:strStock>
                                        </web:GetLatestStockValue>
                                    </soapenv:Body>
                                </soapenv:Envelope>
                            </format>
                            <args/>
                        </payloadFactory>
                        <log level="custom">
                            <property name="MSFT" value="MSFT"/>
                        </log>
                        <send>
                            <endpoint key="StocksQuotes"/>
                        </send>
                    </sequence>
                </target>
            </clone>
        </inSequence>
        <outSequence>
            <log level="full">
                <property name="OUT SEQ" value="OUT SEQ"/>
            </log>
            <aggregate id="IA101">
                <completeCondition>
                    <messageCount max="-1" min="-1"/>
                </completeCondition>
                <onComplete expression="$body/*[1]">
                    <send/>
                </onComplete>
            </aggregate>
        </outSequence>
        <faultSequence/>
    </resource>
</api>
